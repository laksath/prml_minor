# -*- coding: utf-8 -*-
"""B19CSE039_B19CSE045.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18e3Z-GlkqfLaqc02BMiZAHnYWhKqSGdX
"""

import numpy as np
import os
import cv2
import matplotlib.pyplot as plt
import sys
from matplotlib import pyplot
from keras.datasets import cifar10
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.optimizers import SGD
from keras.layers import Dropout
import tensorflow as tf
import pandas as pd
tf.config.run_functions_eagerly(True)
import pandas  as pd
import seaborn as sns
import warnings
from sklearn.model_selection import train_test_split
import skimage
from skimage.feature import hog
from skimage.io import imread
from skimage.transform import rescale
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
warnings.filterwarnings('ignore')
os.getcwd()

list_masked_names=[]
for x in os.listdir("AFDB_masked_face_dataset"):
  list_masked_names.append(x)

list_face_names=[]
for x in os.listdir("AFDB_face_dataset"):
  list_face_names.append(x)

list_masked_names

face_images=[]
for folder_name in os.listdir("AFDB_face_dataset"):
  for filename in os.listdir("AFDB_face_dataset/"+folder_name):
    if filename.endswith("jpg"): 
      face_images.append(cv2.imread("AFDB_face_dataset/"+folder_name+"/"+filename))

mask_images=[]
for folder_name in os.listdir("AFDB_masked_face_dataset"):
  for filename in os.listdir("AFDB_masked_face_dataset/"+folder_name):
    if filename.endswith("jpg"): 
      mask_images.append(cv2.imread("AFDB_masked_face_dataset/"+folder_name+"/"+filename))

plt.imshow(cv2.cvtColor(mask_images[0], cv2.COLOR_BGR2RGB))

resized_image = cv2.resize(mask_images[0], (128,128), 
                           interpolation=cv2.INTER_NEAREST)
plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))

mask_images_final=[]
for i in range (0,len(mask_images)):
 mask_images_final.append( cv2.resize(mask_images[i], (128,128), 
                           interpolation=cv2.INTER_NEAREST))

mask_images[90]

plt.imshow(cv2.cvtColor(mask_images[90], cv2.COLOR_BGR2RGB))

face_images_final=[]
for i in range (0,len(face_images)):
 face_images_final.append(cv2.resize(face_images[i], (128,128), 
                           interpolation=cv2.INTER_NEAREST)
                         )

y_face = [ 0 for i in range(len(face_images_final))]
y_mask = [ 1 for i in range(len(mask_images_final))]

X = face_images_final[:20000]+mask_images_final
y =  y_face[:20000]+y_mask

X=np.array(X)
X.shape

y=np.array(y)
y.shape

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.5)

X_train.shape

y_train.shape

y_test.shape

X_test.shape

import skimage

from skimage.feature import hog
from skimage.io import imread
from skimage.transform import rescale
X_train_grey = np.array([skimage.color.rgb2gray(img) for img in X_train])
X_train_hog  = np.array([hog(img,pixels_per_cell=(12,12),cells_per_block=(2, 2),orientations=5) for img in X_train_grey])

X_test_grey = np.array([skimage.color.rgb2gray(img) for img in X_train])
X_test_hog  = np.array([hog(img,pixels_per_cell=(12,12),cells_per_block=(2, 2),orientations=5) for img in X_train_grey])
X_test_hog.shape

X_test_hog.shape

X_train1=X_train.reshape(11059,49152)
X_test1=X_test.reshape(11059,49152)

X_train_hog.shape

y_train.shape

#MLP & KNN

from sklearn.neighbors import KNeighborsClassifier

im1=KNeighborsClassifier(algorithm= 'auto', leaf_size= 30, n_neighbors= 1)
m1=im1.fit(X_train_hog,y_train)
m1.score(X_test_hog,y_test)

from sklearn.neural_network import MLPClassifier

mlp=MLPClassifier()

m3=mlp.fit(X_train_hog,y_train)
m3.score(X_test_hog,y_test)

#RandomForestClassifier

from sklearn.ensemble import RandomForestClassifier

rfc=RandomForestClassifier(criterion='entropy')

m4=rfc.fit(X_train_hog,y_train)
rfc.score(X_test_hog,y_test)

model = Sequential()
model.add(Dense(256, activation='relu', input_dim=49152))
model.add(Dense(256, activation='relu'))
model.add(Dense(10, activation='softmax'))
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)

model.compile(optimizer=sgd,
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train1,y_train, epochs=5, batch_size=32, verbose=2, validation_split=0.2)

#all values for every epoch isn't supposed to be same hence the kernel seems to be misbehaving but no restarting or changing produced any effect so we let them as it is

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

score = model.evaluate(X_test1, y_test, batch_size=128, verbose=0)
score

#SVM

mask_final=[]
for i in range(len(mask_images)):
  mask_final.append(cv2.resize(mask_images[i], (32,32), interpolation=cv2.INTER_NEAREST))

face_final=[]
for i in range(len(face_images)):
  face_final.append(cv2.resize(face_images[i], (32,32), interpolation=cv2.INTER_NEAREST))

X = face_final[0:20000]+mask_final
y =  y_face[0:20000]+y_mask

len(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)

fig = plt.figure(figsize=(10, 10))
for i in range(500,600):
  fig.add_subplot(10,10, i+1-500)
  plt.imshow(X_train[i])
  plt.axis('off')

import cv2
X_train_grey=[]
for i in range(len(X_train)):
  X_train_grey.append(cv2.cvtColor(X_train[i], cv2.COLOR_BGR2GRAY))

fig = plt.figure(figsize=(10, 10))
for i in range(500,600):
  fig.add_subplot(10,10, i+1-500)
  plt.imshow(X_train_grey[i],cmap='gray')
  plt.axis('off')

import skimage
from skimage.feature import hog
from skimage.io import imread
from skimage.transform import rescale

X_train_grey = np.array([skimage.color.rgb2gray(img) for img in X_train])
X_train_hog  = np.array([hog(img,pixels_per_cell=(12,12),cells_per_block=(2, 2),orientations=5) for img in X_train_grey])
X_test_grey = np.array([skimage.color.rgb2gray(img) for img in X_test])
X_test_hog  = np.array([hog(img,pixels_per_cell=(12,12),cells_per_block=(2, 2),orientations=5) for img in X_test_grey])

X_train_hog[0].shape

from sklearn.svm import SVC

svm = SVC(gamma="auto",decision_function_shape="ovo",C=1)
svm.fit(X_train_hog,y_train)
y_pred = svm.predict(X_test_hog)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

#gridsearchcv
from sklearn.model_selection import GridSearchCV
svm_1={'kernel':['linear', 'rbf', 'sigmoid'],'decision_function_shape':['ovo', 'ovr'],'C':[0.1,1,10]}

gs_svm_1=GridSearchCV(SVC(),svm_1,scoring='accuracy')

gs_svm_1.fit(X_train_hog,y_train)

gs_svm_1.best_params_

gs = pd.DataFrame(gs_svm_1.cv_results_)
gs

y_pred = gs_svm_1.predict(X_test_hog)

accuracy_score(y_pred,y_test)

